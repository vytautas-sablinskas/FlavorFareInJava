package com.vytsablinskas.flavorfare.integration.services;

import com.vytsablinskas.flavorfare.services.interfaces.RestaurantService;
import com.vytsablinskas.flavorfare.shared.constants.Messages;
import com.vytsablinskas.flavorfare.shared.dtos.restaurant.AddRestaurantDto;
import com.vytsablinskas.flavorfare.shared.dtos.restaurant.RestaurantDto;
import com.vytsablinskas.flavorfare.shared.dtos.restaurant.UpdateRestaurantDto;
import com.vytsablinskas.flavorfare.shared.utils.Result;
import com.vytsablinskas.flavorfare.shared.utils.ResultEntity;
import com.vytsablinskas.flavorfare.utils.RestaurantTestData;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
@ExtendWith(SpringExtension.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class RestaurantServiceIntegrationTest {
    private final RestaurantService underTest;

    @Autowired
    public RestaurantServiceIntegrationTest(RestaurantService underTest) {
        this.underTest = underTest;
    }

    @Test
    public void getRestaurants_shouldGetAllRestaurants() {
        AddRestaurantDto restaurantA = RestaurantTestData.getAddRestaurantDtoA();
        underTest.addRestaurant(restaurantA);

        AddRestaurantDto addRestaurantDtoB = RestaurantTestData.getAddRestaurantDtoB();
        underTest.addRestaurant(addRestaurantDtoB);

        List<RestaurantDto> restaurants = underTest.getRestaurants();

        assertThat(restaurants)
                .hasSize(2);
    }

    @Test
    public void getRestaurant_validId_returnsRestaurantDto() {
        AddRestaurantDto addRestaurantDtoA = RestaurantTestData.getAddRestaurantDtoA();
        RestaurantDto restaurantDto = underTest.addRestaurant(addRestaurantDtoA);

        ResultEntity<RestaurantDto> result = underTest.getRestaurant(restaurantDto.getId());

        assertThat(result.getEntity())
                .isNotNull()
                .isEqualTo(restaurantDto);
    }

    @Test
    public void getRestaurant_invalidId_returnsNoSuccessInformation() {
        ResultEntity<RestaurantDto> result = underTest.getRestaurant(1);

        assertThat(result.isSuccess()).isEqualTo(false);
        assertThat(result.getMessage()).isEqualTo(Messages.GetRestaurantNotFoundMessage(1));
        assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
        assertThat(result.getEntity()).isNull();
    }

    @Test
    public void addRestaurant_shouldAddRestaurantWithAutoGeneratedId() {
        AddRestaurantDto restaurantA = RestaurantTestData.getAddRestaurantDtoA();

        RestaurantDto createdRestaurant = underTest.addRestaurant(restaurantA);

        assertThat(createdRestaurant.getId()).isGreaterThan(0);
    }

    @Test
    public void updateRestaurant_validId_shouldUpdateAndReturnUpdatedRestaurant() {
        AddRestaurantDto restaurantA = RestaurantTestData.getAddRestaurantDtoA();
        RestaurantDto createdRestaurant = underTest.addRestaurant(restaurantA);
        UpdateRestaurantDto restaurantUpdateDto = RestaurantTestData.getUpdateRestaurantA();

        ResultEntity<RestaurantDto> result = underTest.updateRestaurant(createdRestaurant.getId(), restaurantUpdateDto);

        assertThat(result.isSuccess()).isTrue();
        assertThat(result.getEntity().getName()).isEqualTo(restaurantUpdateDto.getName());
    }

    @Test
    public void updateRestaurant_invalidId_shouldReturnNoSuccessInformation() {
        UpdateRestaurantDto restaurantUpdateDto = RestaurantTestData.getUpdateRestaurantA();

        ResultEntity<RestaurantDto> result = underTest.updateRestaurant(1, restaurantUpdateDto);

        assertThat(result.isSuccess()).isFalse();
        assertThat(result.getMessage()).isEqualTo(Messages.GetRestaurantNotFoundMessage(1));
        assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
        assertThat(result.getEntity()).isNull();
    }

    @Test
    public void deleteRestaurant_validId_shouldReturnSuccess() {
        AddRestaurantDto restaurantA = RestaurantTestData.getAddRestaurantDtoA();
        RestaurantDto createdRestaurant = underTest.addRestaurant(restaurantA);

        Result result = underTest.deleteRestaurant(createdRestaurant.getId());

        assertThat(result.isSuccess()).isTrue();
    }

    @Test
    public void deleteRestaurant_invalidId_shouldReturnNoSuccessWithMessage() {
        Integer invalidId = 1;

        Result result = underTest.deleteRestaurant(invalidId);

        assertThat(result.isSuccess()).isFalse();
        assertThat(result.getMessage()).isEqualTo(Messages.GetRestaurantNotFoundMessage(invalidId));
        assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    }
}