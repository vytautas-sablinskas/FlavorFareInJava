package com.vytsablinskas.flavorfare.integration.services;

import com.vytsablinskas.flavorfare.business.exceptions.ResourceNotFoundException;
import com.vytsablinskas.flavorfare.business.exceptions.TableSizeAlreadyInDatabaseException;
import com.vytsablinskas.flavorfare.business.services.interfaces.RestaurantService;
import com.vytsablinskas.flavorfare.business.services.interfaces.TableService;
import com.vytsablinskas.flavorfare.shared.dtos.restaurant.RestaurantDto;
import com.vytsablinskas.flavorfare.shared.dtos.table.AddTableDto;
import com.vytsablinskas.flavorfare.shared.dtos.table.TableDto;
import com.vytsablinskas.flavorfare.shared.dtos.table.UpdateTableDto;
import com.vytsablinskas.flavorfare.utils.data.RestaurantTestData;
import com.vytsablinskas.flavorfare.utils.data.TableTestData;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

@SpringBootTest
@ExtendWith(SpringExtension.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class TableServiceIntegrationTests {

    private final RestaurantService restaurantService;
    private final TableService underTest;

    @Autowired
    public TableServiceIntegrationTests(TableService tableService, RestaurantService restaurantService) {
        this.restaurantService = restaurantService;
        this.underTest = tableService;
    }

    @Test
    public void getTables_validRestaurantId_shouldGetAllRestaurantTables() {
        Integer restaurantId = addRestaurantForTesting();
        AddTableDto addTableDtoB = TableTestData.getAddTableDtoB();
        underTest.addTable(restaurantId, TableTestData.getAddTableDtoA());
        TableDto secondTable = underTest.addTable(restaurantId, addTableDtoB);

        List<TableDto> tables = underTest.getTables(restaurantId);

        assertThat(tables).hasSize(2);
        assertThat(tables.get(1).getCount()).isEqualTo(secondTable.getCount());
        assertThat(tables.get(1).getRestaurantId()).isEqualTo(secondTable.getRestaurantId());
        assertThat(tables.get(1).getSize()).isEqualTo(secondTable.getSize());
        assertThat(tables.get(1).getId()).isEqualTo(secondTable.getId());
    }

    @Test
    public void getTables_invalidRestaurantId_shouldThrowResourceNotFoundException() {
        Integer invalidRestaurantId = 1;

        assertThatThrownBy(() ->
                underTest.getTables(invalidRestaurantId)
        ).isInstanceOf(ResourceNotFoundException.class);
    }

    @Test
    public void getTable_validInputs_shouldReturnCorrectTableDto() {
        Integer validRestaurantId = addRestaurantForTesting();
        TableDto expectedResult = underTest.addTable(validRestaurantId, TableTestData.getAddTableDtoA());

        TableDto result = underTest.getTable(validRestaurantId, expectedResult.getId());

        assertThat(result).isEqualTo(expectedResult);
    }

    @Test
    public void getTable_invalidRestaurantId_shouldThrowResourceNotFoundException() {
        Integer invalidRestaurantId = 1;
        Integer shouldNotReachTableId = 1;

        assertThatThrownBy(() ->
                underTest.getTable(invalidRestaurantId, shouldNotReachTableId)
        ).isInstanceOf(ResourceNotFoundException.class);
    }

    @Test
    public void getTable_invalidTableId_shouldThrowResourceNotFoundException() {
        Integer validRestaurantId = addRestaurantForTesting();
        Integer invalidTableId = 1;

        assertThatThrownBy(() ->
                underTest.getTable(validRestaurantId, invalidTableId)
        ).isInstanceOf(ResourceNotFoundException.class);
    }

    @Test
    public void addTable_validRestaurantId_shouldAddTableAndReturnTableDtoWithAutoGeneratedId() {
        Integer restaurantId = addRestaurantForTesting();
        AddTableDto addTableDtoA = TableTestData.getAddTableDtoA();

        TableDto tableDto = underTest.addTable(restaurantId, addTableDtoA);

        assertThat(tableDto.getCount()).isEqualTo(addTableDtoA.getCount());
        assertThat(tableDto.getSize()).isEqualTo(addTableDtoA.getSize());
        assertThat(tableDto.getRestaurantId()).isEqualTo(restaurantId);
    }

    @Test
    public void addTable_validInputsButContainsSameSizeTableInformation_shouldThrowTableSizeAlreadyInDatabaseException() {
        Integer restaurantId = addRestaurantForTesting();
        AddTableDto addTableDtoA = TableTestData.getAddTableDtoA();

        underTest.addTable(restaurantId, addTableDtoA);

        assertThatThrownBy(() ->
                underTest.addTable(restaurantId, addTableDtoA)
        ).isInstanceOf(TableSizeAlreadyInDatabaseException.class);
    }

    @Test
    public void addTable_invalidRestaurantId_shouldThrowResourceNotFoundException() {
        assertThatThrownBy(() ->
                underTest.addTable(1, TableTestData.getAddTableDtoA())
        ).isInstanceOf(ResourceNotFoundException.class);
    }

    @Test
    public void updateTable_validTableId_shouldReturnUpdatedTableDto() {
        Integer validRestaurantId = addRestaurantForTesting();
        TableDto table = underTest.addTable(validRestaurantId, TableTestData.getAddTableDtoA());
        UpdateTableDto expectedTable = TableTestData.getUpdateTableDtoA();

        TableDto result = underTest.updateTable(validRestaurantId, table.getId(), expectedTable);

        assertThat(result.getId()).isEqualTo(table.getId());
        assertThat(result.getSize()).isEqualTo(expectedTable.getSize());
        assertThat(result.getCount()).isEqualTo(expectedTable.getCount());
    }

    @Test
    public void updateTable_validInputsButContainsSameSizeTableInformation_shouldThrowTableSizeAlreadyInDatabaseException() {
        Integer restaurantId = addRestaurantForTesting();
        TableDto duplicateSizeTable = underTest.addTable(restaurantId, TableTestData.getAddTableDtoA());
        TableDto tableToUpdate = underTest.addTable(restaurantId, TableTestData.getAddTableDtoB());
        UpdateTableDto updateTableDtoA = TableTestData.getUpdateTableDtoA();
        updateTableDtoA.setSize(duplicateSizeTable.getSize());

        assertThatThrownBy(() ->
                underTest.updateTable(restaurantId, tableToUpdate.getId(), updateTableDtoA)
        ).isInstanceOf(TableSizeAlreadyInDatabaseException.class);
    }

    @Test
    public void updateTable_validInputsAndContainsSameSizeButUpdateIsOnSameTableAsDuplicateSize_shouldUpdateTable() {
        Integer restaurantId = addRestaurantForTesting();
        TableDto tableToUpdate = underTest.addTable(restaurantId, TableTestData.getAddTableDtoA());
        UpdateTableDto updateTableDtoA = TableTestData.getUpdateTableDtoA();

        TableDto table = underTest.updateTable(restaurantId, tableToUpdate.getId(), updateTableDtoA);

        assertThat(table.getCount()).isEqualTo(updateTableDtoA.getCount());
        assertThat(table.getSize()).isEqualTo(updateTableDtoA.getSize());
    }


    @Test
    public void updateTable_invalidRestaurantId_shouldThrowResourceNotFoundException() {
        Integer invalidRestaurantId = 1;
        Integer shouldNotReachTableId = 1;

        assertThatThrownBy(() ->
                underTest.updateTable(invalidRestaurantId, shouldNotReachTableId, TableTestData.getUpdateTableDtoA())
        ).isInstanceOf(ResourceNotFoundException.class);
    }

    @Test
    public void updateTable_invalidTableId_shouldThrowResourceNotFoundException() {
        Integer validRestaurantId = addRestaurantForTesting();
        Integer invalidTableId = 1;

        assertThatThrownBy(() ->
                underTest.updateTable(validRestaurantId, invalidTableId, TableTestData.getUpdateTableDtoA())
        ).isInstanceOf(ResourceNotFoundException.class);
    }

    @Test
    public void delete_validIds_shouldDeleteTable() {
        RestaurantDto restaurantDto = restaurantService.addRestaurant(RestaurantTestData.getAddRestaurantDtoB());
        TableDto table = underTest.addTable(restaurantDto.getId(), TableTestData.getAddTableDtoA());

        underTest.deleteTable(restaurantDto.getId(), table.getId());

        List<TableDto> tables = underTest.getTables(restaurantDto.getId());
        assertThat(tables).hasSize(0);
    }

    @Test
    public void deleteTable_invalidRestaurantId_shouldThrowTableSizeAlreadyInDatabaseException() {
        Integer invalidRestaurantId = addRestaurantForTesting();
        Integer shouldNotReachTableId = 2;

        assertThatThrownBy(() ->
                underTest.deleteTable(invalidRestaurantId, shouldNotReachTableId)
        ).isInstanceOf(ResourceNotFoundException.class);
    }

    private Integer addRestaurantForTesting() {
        RestaurantDto restaurantDto = restaurantService.addRestaurant(RestaurantTestData.getAddRestaurantDtoA());

        return restaurantDto.getId();
    }
}
